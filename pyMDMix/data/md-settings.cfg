
##     This is a pyMDMix user configuration file. The parameters in
##     this file are overriding the default parameters given in
##     /home/dalvarez/src/pymdmix_cbdd/pyMDMix/data/defaults/md-settings.cfg.
##     If missing, pyMDMix creates a new user configuration file with
##     those parameters for which the default value seems
##     invalid. The remaining parameters are commented out.

##     Parameters in this file will be accessible from within python as
##     fields of Biskit.settings. For example::
##
##       leaprc = some/path/to/leaprc  # some comment
##
##     will lead to a variable in pyMDMix.settings::
##
##     >>> import pyMDMix.setting as S
##     >>> S.leaprc
##     >>> 'some/path/to/leaprc'

##     ...If, and only if, leaprc also exists in the default settings
##     file.  Parameters that are not listed in the default settings file
##     are ignored.

##     The default type of parameters is str. A prefix to the name like
##     'int-', 'float-', 'bool-', 'list-', etc. will be interpreted as
##     type-casting. For example::
##
##       float-nice_value = 10  # some comment
##
##     will lead to a variable in Biskit.settings::
##
##     >>> S.nice_value
##     >>> 10.0

##     Pay special attention to 'list-' type, as this type will try to chop
##     a comma separated string into chunks and build a list of it.

[GENERAL]

## list-FF = leaprc.protein.ff14SB,leaprc.gaff	##  Default forcefield files to load when opening tLeap
## alignfolder = align	##  Name for folder containing aligned trajectory
## list-avail_trajext = nc,netcdf,x,x.gz,dcd
## densityfolder = dgrids	##  Folder containing density/occupancy grids
## energyfolder = egrids	##  Name for folder containing energy grids
## eqfolder = eq	##  Name for equilibration folder
## eqoutfiletemplate = eq{step}.{extension}
## int-heating_steps = 100000	##  Heating steps for each file. 100.000 steps = 200ps
## iwrap = 1	##  Set IWRAP to 0 or 1. If 1, be careful when using positional restraints. Make sure the check_com.sh script is working.
## mdProgram = AMBER	##  Default simulation program. Options: AMBER, NAMD or OPENMM currently
## float-md_timestep = 2.0	##  2 fs timestep
## mdfolder = md	##  Name for the production folder
## mdnetcdf = 1	##  1 (write trajectory in nc format) or 0 (write in ascii format)
## mdoutfiletemplate = md{step}.{extension}
## minfolder = min	##  Name for minimization folder
## int-minimizationAsRef = 
## int-minsteps = 5000	##  Number of minimization steps to run
## int-namd_heating_steps = 500000	##  1ns equilibration total time to increase temperature from float-heating_tempi to float-temp in NAMD
## int-nanos = 20	##  Production length in nanoseconds. Default: 20ns
## int-npt_eq_steps = 500000	##  1ns equilibration at NPT
## float-npt_pressure = 1.0	##  Default pressure for npt ensemble
## float-parm_heating_tempi = 100.0	##  Start heating at 100 K
## int-prod_steps = 500000	##  1ns production files = prod_steps*(md_timestep/10e6)
## production_ensemble = NVT	##  Default ensemble for production run (NVT is slightly faster than NPT). Options: NVT or NPT
## float-restrForce = 	##  Restraining force if applicable. Default 0 kcal/mol.A^2
## restrMode = FREE	##  Restraining scheme: FREE, HA (heavy atoms) or BB (backbone only)
## float-temp = 300.0	##  Simulation temperature. Default = 300K
## int-trajfrequency = 500	##  Trajectory writing frequency  = 1000 snapshots per nanosecond = int-production_nsteps / int-trajfrequency

